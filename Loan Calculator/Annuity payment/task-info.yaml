type: edu
custom_name: stage3
files:
- name: creditcalc/creditcalc.py
  visible: true
  text: |
    import math
    msg_0 = "Enter the loan principal: "
    msg_1 = "Type \"m\" - for number of monthly payments, \ntype \"p\" - for the monthly payment: "
    msg_2 = "What do you want to calculate?"
    msg_3 = "Enter the monthly payment: "
    msg_4 = "Enter the number of months: "

    while True:
        print(msg_0)
        loan_principal = int(input())
        print(msg_1)
        choice = input()
        if choice == "m":
            print(msg_3)
            payment = input()
            term = (loan_principal / int(payment))
            print(f"It will take you {term} months to pay off loan")
            break
        elif choice == "p":
            print(msg_4)
            months = input()
            m_payment = (loan_principal / int(months))
            if (m_payment % 2) == 0:
                print(f"Your monthly payment = {m_payment}.")
                break
            else:
                m_payment = math.ceil(m_payment)
                last_pay = loan_principal - (int(months) - 1) * math.ceil(m_payment)
                print(f"Your monthly payment = {m_payment} and the last payment = {last_pay}.")
                break
        else:
            break
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult
    import re

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class LoanCalcTest(StageTest):
        def generate(self):
            return [
                TestCase(
                    stdin='a\n1000000\n60\n10',
                    attach=21248,
                ),
                TestCase(
                    stdin='a\n1000000\n8\n9.8',
                    attach=129638,
                ),
                TestCase(
                    stdin='a\n3000000\n302\n11.2',
                    attach=29803,
                ),
                TestCase(
                    stdin='n\n500000\n23000\n7.8',
                    attach=[2, 0],
                ),
                TestCase(
                    stdin='n\n700000\n26000\n9.1',
                    attach=[2, 7],
                ),
                TestCase(
                    stdin='p\n8721.8\n120\n5.6',
                    attach=(800000,),
                ),
                TestCase(
                    stdin='p\n6898.02\n240\n3.4',
                    attach=(1200001,),
                ),
            ]

        def check(self, reply, attach):
            numbers = re.findall(r'[-+]?(\d*\.\d+|\d+)', reply)
            if len(numbers) == 0:
                return CheckResult.wrong(
                    'No numbers in the answer',
                )

            if isinstance(attach, tuple):
                for i in numbers:
                    if abs(attach[0] - float(i)) < 2:
                        return CheckResult.correct()
                output = 'Numbers in your answer: ' + ' '.join(numbers)
                output += 'But correct principal is {0}'.format(attach)
                return CheckResult.wrong(output)

            if isinstance(attach, list):
                # to exclude answers like 'it takes 2.01 years'
                # but 'it takes 2.0 years' let it be OK.
                epsilon = 0.00001
                numbers = [
                    int(float(x)) for x in numbers
                    if abs(int(float(x)) - float(x)) < epsilon
                ]
                if attach[1] == 0:
                    if 'year' in reply.lower() and attach[0] in numbers:
                        return CheckResult.correct()

                    output = 'Correct result: {0} years, but you output "{1}"'
                    return CheckResult.wrong(
                        output.format(attach[0], reply),
                    )
                else:
                    if attach[0] in numbers and 'year' in reply.lower():
                        if attach[1] in numbers and 'month' in reply.lower():
                            return CheckResult.correct()

                    output = (
                        'Correct result: {0} years {1} months, '
                        'but you output "{2}"'
                    )
                    return CheckResult.wrong(
                        output.format(attach[0], attach[1], reply),
                    )

            if str(attach) not in reply.lower():
                output = (
                    'Correct annuity payment is {0} but you output numbers: {1}'
                )
                figures = ' '.join(numbers)
                return CheckResult.wrong(
                    output.format(attach, figures),
                )

            return CheckResult.correct()


    if __name__ == '__main__':
        LoanCalcTest('creditcalc.creditcalc').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/90/stages/502/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 18 Jan 2022 15:57:45 UTC
record: 2
