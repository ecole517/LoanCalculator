type: edu
custom_name: stage2
files:
- name: creditcalc/creditcalc.py
  visible: true
  text: |
    import math
    msg_0 = "Enter the loan principal: "
    msg_1 = "Type \"m\" - for number of monthly payments, \ntype \"p\" - for the monthly payment: "
    msg_2 = "What do you want to calculate?"
    msg_3 = "Enter the monthly payment: "
    msg_4 = "Enter the number of months: "

    while True:
        print(msg_0)
        loan_principal = int(input())
        print(msg_1)
        choice = input()
        if choice == "m":
            print(msg_3)
            payment = input()
            term = (loan_principal / int(payment))
            print(f"It will take you {term} months to pay off loan")
            break
        elif choice == "p":
            print(msg_4)
            months = input()
            m_payment = (loan_principal / int(months))
            if (m_payment % 2) == 0:
                print(f"Your monthly payment = {m_payment}.")
                break
            else:
                m_payment = math.ceil(m_payment)
                last_pay = loan_principal - (int(months) - 1) * math.ceil(m_payment)
                print(f"Your monthly payment = {m_payment} and the last payment = {last_pay}.")
                break
        else:
            break
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult
    import re

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class LoanCalcTest(StageTest):
        def generate(self):
            return [
                TestCase(
                    stdin='1000\nm\n200',
                    attach=(5, 'months'),
                ),
                TestCase(
                    stdin='1000\nm\n150',
                    attach=(7, 'months'),
                ),
                TestCase(
                    stdin='1000\nm\n1000',
                    attach=(1, 'month'),
                ),
                TestCase(
                    stdin='1000\np\n10',
                    attach=100,
                ),
                TestCase(
                    stdin='1000\np\n9',
                    attach=['112', '104'],
                ),
            ]

        def check(self, reply, attach):
            reply = reply.lower()
            if isinstance(attach, tuple):
                a, b = attach
                if a == 1:
                    if '1 months' in reply.lower():
                        output = '{0} should be in the output, but you output {1}'
                        return CheckResult.wrong(
                            output.format('1 month', reply),
                        )

                if str(a) not in reply or b not in reply.lower():
                    output = (
                        '"{0} {1}" should be in the output, but you output {2}'
                    )
                    return CheckResult.wrong(
                        output.format(a, b, reply),
                    )

            elif isinstance(attach, list):
                if attach[0] not in reply or attach[1] not in reply:
                    numbers = re.findall(r'[-+]?(\d*\.\d+|\d+)', reply)
                    if len(numbers) == 0:
                        output = (
                            'Correct monthly payment is {0} and last payment is'
                            ' {1}, but there are no any numbers in your output'
                            .format(attach[0], attach[1])
                        )
                    elif len(numbers) == 1:
                        output = (
                            'Correct monthly payment is {0} and last payment is'
                            ' {1}, but there are only {2} in your output'
                            .format(attach[0], attach[1], numbers[0])
                        )
                    else:
                        output = (
                            'Correct monthly payment is {0} and last payment is'
                            ' {1}, but there are only {2} {3} in your output'
                            .format(attach[0], attach[1], numbers[0], numbers[1])
                        )
                    return CheckResult.wrong(output)
            else:
                if str(attach) not in reply:
                    output = (
                        'Correct monthly payment is {0}. But your output is {1}'
                    )
                    return CheckResult.wrong(
                        output.format(attach, reply),
                    )

            return CheckResult.correct()


    if __name__ == '__main__':
        LoanCalcTest('creditcalc.creditcalc').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/90/stages/501/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 18 Jan 2022 15:25:27 UTC
record: 3
